on:
  workflow_dispatch:
    inputs:
      clang_version:
        description: "Version of clang we'll build."
        type: string
        required: true
      github_tag:
        description: "Tag to upload the release to."
        type: string
      overwrite:
        description: "DANGEROUS. Overwrite the existing artifacts."
        type: boolean

name: Clang

env:
  GIT_TAG: ${{ inputs.github_tag ||  format('clang-{0}-{1}', inputs.clang_version, github.run_id) }}
  OVERWRITE: ${{ inputs.overwrite || inputs.github_tag == '' }}

jobs:
  linux:
    name: build clang ${{ matrix.runner }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner:
          - ubicloud-standard-8-ubuntu-2404
          - ubicloud-standard-8-arm-ubuntu-2404
    permissions:
      contents: write
    steps:
      - name: Clone scufflecloud/toolchains repo
        uses: actions/checkout@v4

      - name: Build in Docker
        run: |
          cd clang
          docker build \
            --build-arg CLANG_VERSION="${{ inputs.clang_version }}" \
            --target package_image \
            --tag clang_build \
            .

      - name: Package Toolchain
        run: |
          container_id="$(docker create clang_build)"
          docker cp "$container_id:/downloads/artifacts" .

      - name: Upload toolchain to release
        uses: svenstaro/upload-release-action@v2
        with:
          file: "artifacts/*.tar.zst"
          file_glob: true
          tag: ${{ env.GIT_TAG }}
          overwrite:  ${{ env.OVERWRITE }}

  macos:
    name: build clang ${{ matrix.runner }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner:
          # ARM
          - macos-14
          # x86_64
          - macos-13
    permissions:
      contents: write
    steps:
      - name: Install required tools
        run: brew install ninja zstd

      - name: Clone scufflecloud/toolchains repo
        uses: actions/checkout@v4

      - name: Clone llvm-project at Version
        uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          ref: 'llvmorg-${{ inputs.clang_version }}'
          fetch-depth: 1 # llvm-project is quite large
          path: llvm-project

      - name: cmake configure
        # Note: Unlike Linux we don't statically link libstdc++
        run: |
          ZLIB_ARG=""
          if [[ "${{ runner.arch }}" == "ARM64" ]]; then
            ZLIB_ARG="-Dzstd_LIBRARY=/opt/homebrew/opt/zstd/lib/libzstd.a"
          fi

          set -exuo pipefail
          cd llvm-project
          cmake -G Ninja -S llvm -B build \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_FLAGS="-flto=thin -pthread" \
              -DCMAKE_CXX_FLAGS="-flto=thin -pthread" \
              -DCMAKE_INTERPROCEDURAL_OPTIMIZATION="on" \
              -DLLVM_ENABLE_PROJECTS="clang;lld;clang-tools-extra" \
              -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind;compiler-rt" \
              -DLLVM_DISTRIBUTION_COMPONENTS="clang-resource-headers" \
              -DLLVM_ENABLE_LTO=Thin \
              -DLLVM_ENABLE_PIC=ON \
              -DLLVM_ENABLE_THREADS=ON \
              -DLLVM_ENABLE_ZLIB=FORCE_ON \
              -DBUILD_SHARED_LIBS=OFF \
              -DLLVM_INCLUDE_UTILS=OFF \
              -DLLVM_INCLUDE_TESTS=OFF \
              -DLLVM_INCLUDE_EXAMPLES=OFF \
              -DLLVM_INCLUDE_BENCHMARKS=OFF \
              -DLLVM_INCLUDE_DOCS=OFF ${ZLIB_ARG}

      - name: build clang
        run: |
          set -exuo pipefail
          cd llvm-project
          cmake --build build --config Release --target \
            clang \
            lld \
            llvm-ar \
            llvm-as \
            llvm-cov \
            llvm-dwp \
            llvm-dwarfdump \
            llvm-libtool-darwin \
            llvm-nm \
            clang-tidy \
            clang-format \
            clangd \
            llvm-objcopy \
            llvm-objdump \
            llvm-profdata \
            llvm-strip \
            llvm-ranlib \
            cxx \
            cxxabi \
            unwind \
            builtins \
            libclang

      - name: setup template vars
        run: |
          set -exuo pipefail
          # These variables are used in the txt files to subst values.
          echo "clang_major=$(echo "${{ inputs.clang_version }}" | cut -d '.' -f 1)" >> $GITHUB_ENV
          echo "clang_major_minor=$(echo "${{ inputs.clang_version }}" | cut -d '.' -f 1-2)" >> $GITHUB_ENV
          echo "clang_target=$(uname -m)-apple-darwin" >> $GITHUB_ENV
          echo "shared_extension=dylib" >> $GITHUB_ENV

      - name: package toolchain
        run: |
          set -exuo pipefail
          mkdir package 

          for dir in bin include lib; do
            mkdir "package/${dir}"
            cat "clang/${dir}.txt" | while read -r val; do 
              val="${val#mac:}"
              if [[ ${val} != linux* && -n ${val} ]]; then
                eval cp -rP "llvm-project/build/${dir}/${val}" "package/${dir}/"
              fi
            done
          done

          cd package
          tar -cf - * | zstd --ultra -22 -o "../darwin_${CLANG_ARCH}.tar.zst"

      - name: package libclang
        run: |
          set -exuo pipefail
          mkdir package_libclang

          for dir in bin lib; do
            mkdir "package_libclang/${dir}"
            cat "clang/${dir}_libclang.txt" | while read -r val; do
              # Skip anything that starts with "linux".
              if [[ "${val}" == linux* && -n ${val} ]]; then
                  continue
              fi
              # Strip the 'mac:' prefix if it exists.
              val="${val#mac:}"

              eval cp -rP "llvm-project/build/${dir}/${val}" "package_libclang/${dir}/"
            done
          done

          cd package_libclang
          tar -cf - * | zstd --ultra -22 -o ../darwin_"$CLANG_ARCH"_libclang.tar.zst

      - name: Upload Toolchain Artifact
        uses: actions/upload-artifact@v4
        with:
          name: toolchains
          path: "*.tar.zst"

      - name: Upload toolchain to release
        uses: svenstaro/upload-release-action@v2
        with:
          file: "*.tar.zst"
          file_glob: true
          tag: ${{ env.GIT_TAG }}
          overwrite: ${{ env.OVERWRITE }}
